// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Store     Store[]
}

model Form {
  id               String        @id @default(uuid())
  name             String
  rapydSecretToken String
  rapydAccessToken String
  country          String
  currency         String
  requestAmount    Float         @default(0)
  hasPayment       Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  formFields       FormFields[]
  submissions      Submissions[]
  formRequest      FormRequest[]
}

model FormRequest {
  id         String   @id @default(uuid())
  formId     String
  form       Form     @relation(fields: [formId], references: [id])
  checkoutId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FormFields {
  id                  String                @id @default(uuid())
  name                String
  type                String
  required            Boolean
  value               String
  formId              String
  form                Form                  @relation(fields: [formId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  submittedFormFields SubmittedFormFields[]
}

model Submissions {
  id        String                @id @default(uuid())
  formId    String
  form      Form                  @relation(fields: [formId], references: [id])
  data      String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  values    SubmittedFormFields[]
}

model SubmittedFormFields {
  id           String      @id @default(uuid())
  submissionId String
  submission   Submissions @relation(fields: [submissionId], references: [id])
  formFieldId  String
  formField    FormFields  @relation(fields: [formFieldId], references: [id])
  value        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Store {
  id               String     @id @default(uuid())
  name             String
  user_id          String
  owner            User       @relation(fields: [user_id], references: [id])
  Items            Items[]
  rapydSecretToken String?
  rapydAccessToken String?
  country          String
  currency         String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  Checkout         Checkout[]
}

model Items {
  id            String          @id @default(uuid())
  image         String
  name          String
  price         Float
  store_id      String
  store         Store           @relation(fields: [store_id], references: [id])
  checkoutItems CheckoutItems[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Checkout {
  id            String          @id @default(uuid())
  checkoutItems CheckoutItems[]
  address       Address?
  store_id      String
  store         Store           @relation(fields: [store_id], references: [id])
  rapydCheckout String
  total         Float
  orderId       String?         @default("-")
  completed     Boolean?        @default(false)
  paymentStatus String          @default("pending")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Address {
  id          String   @id @default(uuid())
  name        String
  address     String
  city        String
  state       String
  zip         String
  country     String
  phone       String
  checkout_id String   @unique
  checkout    Checkout @relation(fields: [checkout_id], references: [id])
}

model CheckoutItems {
  id          String   @id @default(uuid())
  checkout_id String
  checkout    Checkout @relation(fields: [checkout_id], references: [id])
  item_id     String
  item        Items    @relation(fields: [item_id], references: [id])
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
