// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Store     Store[]
  Campaign  Campaign[]
}

model EmailCheckout {
  id          String   @id @default(uuid())
  email       String
  store_id    String
  checkout_id String
  store       Store    @relation(fields: [store_id], references: [id])
  checkout    Checkout @relation(fields: [checkout_id], references: [id])
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Store {
  id               String          @id @default(uuid())
  name             String
  user_id          String
  owner            User            @relation(fields: [user_id], references: [id])
  Items            Items[]
  rapydSecretToken String?
  rapydAccessToken String?
  country          String
  currency         String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Checkout         Checkout[]
  emailCheckout    EmailCheckout[]
}

model Items {
  id            String          @id @default(uuid())
  image         String
  name          String
  price         Float
  store_id      String
  store         Store           @relation(fields: [store_id], references: [id])
  checkoutItems CheckoutItems[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Checkout {
  id            String          @id @default(uuid())
  checkoutItems CheckoutItems[]
  address       Address?
  store_id      String
  store         Store           @relation(fields: [store_id], references: [id])
  rapydCheckout String
  email         String?
  payment_id    String?         @default("-")
  total         Float
  checkoutVia   String?         @default("SITE")
  orderId       String?         @default("-")
  completed     Boolean?        @default(false)
  paymentStatus String          @default("pending")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  EmailCheckout EmailCheckout[]
}

model Address {
  id          String   @id @default(uuid())
  name        String
  address     String
  city        String
  state       String
  zip         String
  country     String
  phone       String
  checkout_id String   @unique
  checkout    Checkout @relation(fields: [checkout_id], references: [id])
}

model CheckoutItems {
  id          String   @id @default(uuid())
  checkout_id String
  checkout    Checkout @relation(fields: [checkout_id], references: [id])
  item_id     String
  item        Items    @relation(fields: [item_id], references: [id])
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Campaign {
  id               String             @id @default(uuid())
  name             String
  description      String
  url              String             @unique
  user_id          String
  user             User               @relation(fields: [user_id], references: [id])
  targetAmount     Float              @default(0)
  rapydSecretToken String
  rapydAccessToken String
  country          String
  currency         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  response         CampaignResponse[]
}

model CampaignResponse {
  id              String   @id @default(uuid())
  name            String?  @default("Anonymous")
  email           String
  comment         String?
  amount          Float
  checkout_id     String
  displayToPublic Boolean  @default(true)
  campaign_id     String
  paymend_id      String?
  paymentStatus   String   @default("PENDING")
  isPaid          Boolean   @default(false)
  campaign        Campaign @relation(fields: [campaign_id], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
